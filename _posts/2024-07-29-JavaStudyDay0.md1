---
layout: post
title: 240729 JavaStudy
subtitle: 클래스, 메서드, 자료형
gh-repo: daattali/beautiful-jekyll
gh-badge: 
tags: [Computer Vision]
comments: true
---

_240729_  

1. JVM - 문자로 만든 java파일을 자바 컴파일러에 의해 0과 1로 이루어진 
바이너리 파일 bytecode를 "해석하고 실행"한다
like 자동차의 엔진

내 코드[문자] .java -> 컴파일러[javac] -> bytecode .class-> JVM (인터프리터 단계) -> 컴터

2. JDK : 자바 개발 툴 - 자바언어로 개발하는데 필요한 도구들을 포함하는 패키지
	>JRE : (Java Runtime Environment) 자바 실행 환경 

3. 패키지 : 	서로 관련성 있는 클래스(용도별, 기능별)들을 하나의 디렉토리에 묶은 것
		일반적으로 3단계를 사용한다
		소문자로 네이밍
		코드 파일의 가장 첫줄에 쓰여져 있음

4. 클래스 : 	자바에서 파일로 만드는 가장 작은 단위
		자바의 프로젝트는 클래스파일들로 이루어져 있음
		저장 이름 = 클래스 이름

		4-1. 명명법 : 첫글자는 항상 대문자 + 2개 이상 단어로 구성되는 경우 각 단어들의 첫글자는 대문자로 생성 ex) JavaTestLand

		4-2. 회사에서 제공하는 클래스들 => API 마치 레고블럭 / shitf+f2 시 설명서 제공(eclipse의 경우) ex) System, String

		4-3. 클래스가 가지고 있는 3가지 요소 (필수는 아님)
			(1) 멤버필드 : 데이터, 속성, 특징 
				=> 변수 : 프로그램이 시작 후 언제든지 변할 수 있는 상태
				=> 상수 : 프로그램이 시작 후 지정하면 변할 수 없는 상태
				(변수 & 상수 는 최신 데이터 하나만 저장 가능)
			(2) 맴버 메서드 : 동작, 기능
				=> 메서드이름( ) 가 있으면 무조건 메서드
			(3) 생성자 = 특별한 메서드

5. main 메서드 : 	public static void main(String[] args){   }
			JVM이 main() 메서드를 호출해서 프로그램을 시작 시킴
			a.k.a. 진입점 (Entry Point)

6. System.out : 	표준 출력장치 = 모니터
			println("내용"); => 모니터에 "내용"을 출력해라

7. 명명법	: 총 4가지 식별자 			#카멜표기법
		7-1. **클래스** = 4-1. 명명법

		7-2. **변수 & 메서드** :  항상 소문자로 시작 + 2개 이상 단어로 구성되는 경우 뒤 단어들의 첫글자는 대문자 
		ex) main(), println() => 1개 단어 | setProperties(), javaTestLand() => 2개 이상 단어
	
		7-3. **상수** : 모든 문자가 대문자 + 2개 이상 단어로 구성되는 경우 underscore(_) 사용해도 되고 , 안해도 된다
		ex) JAVA_HOME, JAVATESTLAND, JAVA_TEST_LAND

8. 자료형(data type) : 저장되는 데이터의 종류
		8-1. **기본 자료형** : 자바 컴파일러에 의해서 종류를 나눔
					=> 논리형 | 문자형 | 숫자형(정수형, 실수형)

		8-2. **참고 자료형** : "클래스"를 자료형으로 사용함

## Binary Image Morphology  
 Translation, Dilation, Erosion, Closing, Opening 총 5가지의 기본적인 Operations에 대한 정보이다. 추가로 아래에서 사용되는 Structing Elements들은 Origin(Center)가 하나의 pixel로 정의되어 Operation을 진행하게 된다.  
 
#### Translation
 **X** 라는 set of pixels를 position vector t 만큼 Translation 시키면 **Xt**가 나온다. 
![image](https://user-images.githubusercontent.com/32359257/225010479-bf993114-1067-48d3-a90e-382fbef1b042.png)

Binary Image : **B** / Structuring Elements : **S**  

#### Dilation(팽창)
 **B**의 각 pixel 들에 대해 **S**를 적용한다.  
![image](https://user-images.githubusercontent.com/32359257/225013790-cf006a92-a49f-43f4-b42c-55256e6f5f6c.png)  
이후 적용한 모든 pixel들을 합친 것이 Dilation의 결과로 나타나게 된다.  
![image](https://user-images.githubusercontent.com/32359257/225013854-a62ecdd9-1c17-4134-a66d-12c9b7cb708f.png)  
(boundary를 잘 고려해서 자르는 것도 가능하다)  
추가로 Dilation의 경우는 교환법칙이 성립한다. (**B+S** = **S+B**)








